<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_endscreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>current = 1;
other_current = 1;
selected = 0;
other_selected = 0;
if(!global.networkJoin) {
    htme_globalSet("hostEnd",0,buffer_u8);
    htme_globalSet("hostEndSelect",0,buffer_u8);
} else {
    htme_globalSet("clientEnd",0,buffer_u8);
    htme_globalSet("clientEndSelect",0,buffer_u8);
}
hostEndSelect = 0;
clientEndSelect = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.networkJoin) {
    other_current = htme_globalGet("clientEnd");
    other_selected = htme_globalGet("clientEndSelect");
} else {
    other_current = htme_globalGet("hostEnd");
    other_selected = htme_globalGet("hostEndSelect");
}

if(hostEndSelect &amp;&amp; clientEndSelect) {
    if(!current &amp;&amp; !other_current) {
        room_goto(rm_pipedreams);
    } else {
        if(current &lt; 2 &amp;&amp; other_current &lt; 2) {
            room_goto(rm_charselect);
        } else {
            show_message_async("returning to menu...");
            htme_globalSet("dualstart",0,buffer_bool);
            game_restart();
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(current != 1 &amp;&amp; !selected) {
    current -= keyboard_check_released(ord('W'));
}

if(current != 2 &amp;&amp; !selected) {
    current += keyboard_check_released(ord('S'));
}

if(!selected) {
    selected = keyboard_check_released(ord(' '));
}

if(!global.networkJoin) {
    if(htme_globalGet("hostEnd") != current) {
        htme_globalSet("hostEnd",current,buffer_u8);
    }
    if(selected) {
        htme_globalSet("hostEndSelect",1,buffer_u8);
    }
} else {
    if(htme_globalGet("clientEnd") != current) {
        htme_globalSet("clientEnd",current,buffer_u8);
    }
    if(selected) {
        htme_globalSet("clientEndSelect",1,buffer_u8);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
hostEndSelect = htme_globalGet("hostEndSelect");
clientEndSelect = htme_globalGet("clientEndSelect");
if((current != undefined) &amp;&amp; (other_current != undefined)) {
    if(!global.networkJoin) {
        draw_sprite(spr_p1_end,current+hostEndSelect*3,x,y);
        draw_sprite(spr_p2_end,other_current+clientEndSelect*3,x,y);
    } else {
        draw_sprite(spr_p1_end,other_current+hostEndSelect*3,x,y);
        draw_sprite(spr_p2_end,current+clientEndSelect*3,x,y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
